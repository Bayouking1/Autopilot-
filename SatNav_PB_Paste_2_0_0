{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"1"},"key":"0"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"3"},"key":"1"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"4"},"key":"2"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"5"},"key":"3"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"6"},"key":"4"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"7"},"key":"5"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"8"},"key":"6"},{"code":"clickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"9"},"key":"7"},{"code":"--[[\n    SatNav version 2\n    Created By TrogLaByte\n\n    Discord: Trog#5105\n    InGame: TrogLaByte\n    \n    GNU Public License 3.0. Use whatever you want, be so kind to leave credit.\n\n    Thanks to Dorien Grey for his SVG and onscreen button code.\n]] \n-----------------------------------------------\n-- requirements\n-----------------------------------------------\n\nfunction initiateRequiredLibaries()\n    json = require('dkjson')\n    vec3  = require('cpml.vec3')\n    utils = require('cpml.utils')\n    planetRef = require('cpml.planetref')\n    referenceTableSource = require('cpml.atlas')\n    clamp  = utils.clamp\nend\nif pcall(initiateRequiredLibaries) then\n    system.print(\"Libaries loaded successfully\")\n    else\n    system.print(\"Libaries failed to load: check that the following libraries exist:\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/dkjson\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/vec3\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/utils\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/planetref\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/cpml/atlas\")\n    system.print(\"\")\n    system.print(\"planetref.lua and atlas.lua can be obtained from the following GitLab url:\")\n    system.print(\"https://gitlab.com/JayleBreak/dualuniverse/-/tree/master/DUflightfiles/autoconf/custom\")\n    unit.exit()\nend\n-----------------------------------------------\n-- Global Variables\n-----------------------------------------------\n\nlocal UpdateInterval = 1 --export: Interval in seconds between updates of the calculations and (if anything changed) redrawing to the screen(s). You need to restart the script after changing this value.\nlocal BackgroundColor = \"#1e1e1e\"\nlocal PlanetBackgroundColor = \"#34b1eb\" --export Set the background color of the screens. YOU NEED TO LEAVE THE QUOTATION MARKS.\nlocal LocationBackgroundColor = \"#6e3de3\" --export Set the background color of the screens. YOU NEED TO LEAVE THE QUOTATION MARKS.\nlocal clickAreas = {}\nlocal locList={}\nlocal lastPlanetSelected = \"Alioth\"\nlocal pageLines=12\nlocal displayPlanetList={}\nlocal displayLocationList={}\nlocal CurrentLocationPage = 1\nlocal CurrentPlanetPage = 1\n\n-----------------------------------------------\n-- initiate slots to know names\n-----------------------------------------------\n\nfunction InitiateSlots()\n    for slot_name, slot in pairs(unit) do\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and\n            slot.getElementClass then\n            --system.print(slot.getElementClass())\n            if slot.getElementClass():lower():find(\"coreunit\") then\n                core = slot\n                --system.print(\"found core\")\n            end\n            if slot.getElementClass():lower():find(\"screenunit\") then\n                screen = slot\n                --system.print(\"found screen\")\n            end\n            if slot.getElementClass():lower():find(\"databankunit\") then\n                myDatabank = slot\n                --system.print(\"found databank\")\n            end\n        end\n    end\nend\nInitiateSlots()\n-----------------------------------------------\n-- set up galaxy data and functions for planets and locations\n-----------------------------------------------\n\ngalaxyReference = planetRef(referenceTableSource)\nhelios = galaxyReference[0] -- PlanetaryReference.PlanetarySystem instance\nplanetList={}\njdecode = json.decode\njencode = json.encode\n\nfunction getBodyId(planetName)\n    for i=1,200 do\n        if helios[tonumber(i)] ~= nil then\n            if string.lower(helios[tonumber(i)].name) ==string.lower(planetName) then\n                return i\n            end\n        end\n    end\n    return 0\nend\n\nfunction buildPlanetList()\n    for i=1,200 do\n        if helios[tonumber(i)] ~= nil then\n            planetList[#planetList+1]=helios[tonumber(i)].name\n        end\n    end\n    planetList[#planetList+1]=\"Space\"\n    table.sort(planetList)\nend\n\nfunction buildPlanetLocList(planetName)\n    local savedLocation = myDatabank.getStringValue(\"SavedLocations\")  \n    local planet={}\n    locList={}\n    if planetName ~= \"Space\" then\n        table.insert(locList, planetName)  -- add planet name into the list as a default\n    end\n    if savedLocation ~= nil and savedLocations ~= \"\" then \n        local result = jdecode(savedLocation)\n        if result ~= nil then\n            --system.print(\"Loc Planet: \"..planetName)\n             for k, v in pairs(result) do\n                --system.print(\"Planet: \"..v[\"planetname\"])\n                if string.lower(v[\"planetname\"]) == string.lower(planetName) or\n                    string.find(string.lower(v[\"planetname\"]),string.lower(planetName))\n                    then\n                    local location = v[\"position\"]\n                    local bodyId = getBodyId(v[\"planetname\"])\n                    planet = helios[tonumber(bodyId)] \n\n                    worldCoords = planet:convertToMapPosition(vec3(location[\"x\"],location[\"y\"],location[\"z\"]))\n\n                    --system.print(string.format([[\"%s\" @ ::pos{%d,%d,%f,%f,%f}]],\n                    --    v[\"name\"],\n                    --    worldCoords.systemId,\n                    --    worldCoords.bodyId,\n                    --    worldCoords.latitude*constants.rad2deg,\n                    --    worldCoords.longitude*constants.rad2deg,\n                    --   worldCoords.altitude))\n                    table.insert(locList, v[\"name\"])\n                else if v[\"planetname\"] == \"\" and planetName == \"Space\" then -- a space location\n                        local location = v[\"position\"]\n                    --    system.print(string.format([[\"%s\" @ ::pos{%d,%d,%f,%f,%f}]],\n                    --        v[\"name\"],\n                    --        0,\n                    --        0,\n                    --        location[\"x\"],\n                    --        location[\"y\"],\n                    --        location[\"z\"]))\n                        table.insert(locList, v[\"name\"])\n                     end\n                end\n             end\n         end\n    end\n    table.sort(locList)\nend\n\nfunction printLocMapPos(locationName)\n    local savedLocation = myDatabank.getStringValue(\"SavedLocations\")  \n    local planet={}\n    if savedLocation ~= nil and savedLocations ~= \"\" then \n        --system.print(savedLocation)\n        local result = jdecode(savedLocation)\n        if result ~= nil then\n             for k, v in pairs(result) do\n                if string.lower(v[\"name\"]) == string.lower(locationName) then\n                    local location = v[\"position\"]\n                    local bodyId = getBodyId(v[\"planetname\"])\n                    planet = helios[tonumber(bodyId)] \n                    if planet ~= nil then\n                        worldCoords = planet:convertToMapPosition(vec3(location[\"x\"],location[\"y\"],location[\"z\"]))\n\n                        system.print(string.format([[\"%s\" @ ::pos{%d,%d,%f,%f,%f}]],\n                            v[\"name\"],\n                            worldCoords.systemId,\n                            worldCoords.bodyId,\n                            worldCoords.latitude*constants.rad2deg,\n                            worldCoords.longitude*constants.rad2deg,\n                            worldCoords.altitude))\n                        return locationName\n                    else\n                        system.print(string.format([[\"%s\" @ ::pos{%d,%d,%f,%f,%f}]],\n                            v[\"name\"],\n                            0,\n                            bodyId,\n                            location[\"x\"],\n                            location[\"y\"],\n                            location[\"z\"]))\n                        return locationName\n                    end\n                    break\n                end\n             end   \n         end\n    end\n    return \"\"\nend\n\nfunction clearSavedLocations()\n    myDatabank.setStringValue(\"SavedLocations\",\"[]\")\n    system.print(\"Databank cleared\")\nend\n\nfunction isDuplicateLocation(locName, savedLocations)\n    for i=1,#savedLocations do\n        if savedLocations and savedLocations[i].name ~= nil then\n            if savedLocations[i].name == locName then\n                return locName\n            end\n        end\n    end\n    return \"\"\nend\n\nfunction loadPointsOfInterest()\n    local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\n    local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\n                   num ..  ',' .. num .. '}'\n    local savedLocation = {}\n    local j=0\n    loadLocationTable()\n    savedLocation = jdecode(myDatabank.getStringValue(\"SavedLocations\"))\n    \n    for i = 1, #locationTable do\n        local newLoc={}\n        local planet={}\n        if isDuplicateLocation(locationTable[i][1],savedLocation) == \"\" then\n            newLoc[\"name\"]=locationTable[i][1]\n            local newLocPos = locationTable[i][2]\n            --system.print(\"Name: \"..locationTable[i][1]..\" \"..newLocPos)\n            local systemId, bodyId, latitude, longitude, altitude =\n                                            string.match(locationTable[i][2], posPattern)\n            --system.print(\"BodyId: \".. bodyId)\n            if tonumber(bodyId) > 0 then\n                planet = helios[tonumber(bodyId)]   \n                local worldCoords = planet:convertToWorldCoordinates(newLocPos)\n                newLoc[\"position\"]=worldCoords\n                newLoc[\"gravity\"]=unit.getClosestPlanetInfluence()\n                newLoc[\"atmosphere\"]=unit.getAtmosphereDensity()\n                newLoc[\"planetname\"]=planet.name\n            else -- it is a space location\n                newLoc[\"position\"]=vec3(tonumber(latitude), tonumber(longitude), tonumber(altitude))\n                newLoc[\"gravity\"]=0\n                newLoc[\"atmosphere\"]=0\n                newLoc[\"planetname\"]=\"\"\n            end\n        \n            if savedLocation == nil then\n                savedLocation = {}\n                savedLocation[1]=newLoc\n                j = 1\n            else\n                j = j + 1\n                savedLocation[#savedLocation+1]=newLoc\n            end\n        else\n            system.print(\"Duplicate entry for location ignored: \"..locationTable[i][1])\n        end\n    end\n    myDatabank.setStringValue(\"SavedLocations\",jencode(savedLocation))\n    system.print(j .. \" Saved Locations loaded\")\nend\n\nbuildPlanetList()\nbuildPlanetLocList(lastPlanetSelected)\nlocal planetCount=#planetList\n\n-----------------------------------------------\n-- Code for on screen buttons\n-----------------------------------------------\n\nfunction DrawSVG(output) screen.setSVG(output) end\n\nfunction AddClickArea(newEntry) table.insert(clickAreas, newEntry) end\n\nfunction RemoveFromClickAreas(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = nil\n            break\n        end\n    end\nend\n\nfunction UpdateClickArea(candidate, newEntry)\n    --system.print(\"Candidate: \"..candidate..\" x1\"..newEntry.x1)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = newEntry\n                    --system.print(\"Click Area: \"..candidate..\" x1\"..clickAreas[k].x1)\n            break\n        end\n    end\nend\n\nfunction DisableClickArea(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            UpdateClickArea(candidate, {\n                id = candidate,\n                x1 = -1,\n                x2 = -1,\n                y1 = -1,\n                y2 = -1\n            })\n            break\n        end\n    end\nend\n\nfunction InitiateClickAreas()\n    clickAreas = {}\n  \n    AddClickArea({id = \"LoadSavedLocations\", x1 = 300, x2 = 800, y1 = 900, y2 = 1000})\n    AddClickArea({id = \"ClearSavedLocations\", x1 = 1200, x2 = 1700, y1 = 900, y2 = 1000})\n    AddClickArea({id = \"PlanetPageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"PlanetPageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"LocationPageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"LocationPageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    \n    for i = 1, pageLines do\n        AddClickArea({id = string.format(\"PList%d\",i), x1 = 90, x2 = 800, y1 = (180 + i * 55), y2 = (235 + i * 55)})\n        AddClickArea({id = string.format(\"LList%d\",i), x1 = 1090, x2 = 1500, y1 = (180 + i * 55), y2 = (235 + i * 55)})\n    end\nend\n\nfunction FlushClickAreas() clickAreas = {} end\n\nfunction clearLocDispList()\n    for i=1,pageLines do\n        displayLocationList[i] = \"\"\n    end\nend\n\nfunction CheckClick(x, y, HitTarget)\n    HitTarget = HitTarget or \"\"\n    if HitTarget == \"\" then\n        for k, v in pairs(clickAreas) do\n            if v and x >= v.x1 and x <= v.x2 and y >= v.y1 and y <= v.y2 then\n                HitTarget = v.id\n                break\n            end\n        end\n    end\n  \n    --system.print(\"Target Hit = \"..HitTarget)\n    \n    if HitTarget == \"PlanetPageDown\" then\n        CurrentPlanetPage = CurrentPlanetPage+1\n        DrawPlanetList()\n    elseif HitTarget == \"PlanetPageUp\" then\n            CurrentPlanetPage = math.max(CurrentPlanetPage-1,0)\n            DrawPlanetList()\n    elseif HitTarget == \"LocationPageDown\" then\n            CurrentLocationPage = CurrentLocationPage+1\n            DrawPlanetList()\n    elseif HitTarget == \"LocationPageUp\" then\n            CurrentLocationPage = math.max(CurrentLocationPage-1,0)\n            DrawPlanetList()\n    elseif HitTarget == \"LoadSavedLocations\" then\n            --system.print(\"LoadSavedLocations\")\n            loadPointsOfInterest()\n            if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n            end\n    elseif HitTarget == \"ClearSavedLocations\" then\n            --system.print(\"ClearSavedLocations\")\n            clearSavedLocations()\n            if displayPlanetList[1] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[1]\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        CurrentLocationPage=1\n                        CurrentPlanetPage=1\n                        DrawPlanetList()\n            end\n        else\n            for i = 1,pageLines do\n                if HitTarget == string.format(\"PList%s\",i) then\n                    --system.print(\"PHitTarget: \"..HitTarget)\n                    if displayPlanetList[i] ~= \"\" then\n                        lastPlanetSelected = displayPlanetList[i]\n                        buildPlanetLocList(lastPlanetSelected)\n                        clearLocDispList()\n                        selected = \"\"\n                        DrawPlanetList()\n                    end\n                end\n                if HitTarget == string.format(\"LList%s\",i) then\n                    if displayLocationList[i] ~= \"\" then\n                        selected = displayLocationList[i]\n                        if printLocMapPos(selected) == \"\" then\n                            system.print(\"Location: \"..selected..\" sent to Hud\")\n                        else\n                            myDatabank.setStringValue(\"SPBAutopilotTargetName\",selected)\n                        end\n                    end\n                end\n            end\n    end\nend\n\n-----------------------------------------------\n-- Code for building screen content and displaying it\n-----------------------------------------------\n\nlocal svgBootstrap = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" width=\"1920\" height=\"1120\">\n                <defs><style>\n                      .ftitle { font-size: 60px; text-anchor: start;fill: white; }\n                      .ftitlew { font-size: 60px; text-anchor: start;fill: red; }\n                      .ftitle2 { font-size: 60px; text-anchor: start;fill: #565656; }\n                      .ftopmiddle { font-size: 40px; text-anchor: middle;}\n                      .ftopend { font-size: 40px; text-anchor: end;}\n                      .fcapstart { font-size: 30px; text-anchor: start; fill: white;}\n                      .fcapstarthy { font-size: 30px; text-anchor: start; fill: yellow;}\n                      .fcapstarthr { font-size: 30px; text-anchor: start; fill: red;}\n                      .fcapmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fcapend { font-size: 30px; text-anchor: end; fill: white;}\n                      .fmstart { font-size: 25px; text-anchor: start; fill: white;}\n                      .fmstartg { font-size: 40px; text-anchor: start; fill: #1e1e1e;}\n                      .fmstartp { font-size: 40px; text-anchor: start; fill:]]..PlanetBackgroundColor..[[;}\n                      .fmstartl { font-size: 40px; text-anchor: start; fill:]]..LocationBackgroundColor..[[;}\n                      .fmstarty { font-size: 40px; text-anchor: start; fill: #aaaa00;}\n                      .fmstartr { font-size: 40px; text-anchor: end; fill: #ff0000;}\n                      .fmmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fmmiddleb { font-size: 30px; text-anchor: middle; fill: black;}\n                      .fmmiddler { font-size: 30px; text-anchor: middle; fill: red;}\n                      .fmend { font-size: 25px; text-anchor: end; fill: white;}\n                </style></defs>]]\n\nfunction DrawPlanetList()\n    local healthyColor = \"#00aa00\"\n    local brokenColor = \"#aa0000\"\n    local damagedColor = \"#aaaa00\"\n    local integrityColor = \"#aaaaaa\"\n    local healthyTextColor = \"white\"\n    local brokenTextColor = \"#ff4444\"\n    local damagedTextColor = \"#ffff44\"\n    local integrityTextColor = \"white\"\n    \n\n    local screenOutput = \"\"\n\n        -- Draw Header\n    screenOutput = screenOutput .. svgBootstrap\n                           \n        -- Draw main background\n    screenOutput = screenOutput ..\n                       [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"70\" y=\"120\" class=\"ftitle\">Sat Nav</text>]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"70\" y=\"150\" rx=\"10\" ry=\"10\" width=\"820\" height=\"]] ..\n                       ((pageLines + 1) * 55) ..\n                       [[\" style=\"fill:]].. PlanetBackgroundColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"80\" y=\"160\" rx=\"5\" ry=\"5\" width=\"800\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"90\" y=\"191\" class=\"fcapstart\">Planets</text>]]\n           \n\n    local i = 0\n    for j = 1 + (CurrentPlanetPage - 1) * pageLines, pageLines +\n                (CurrentPlanetPage - 1) * pageLines, 1 do\n        i = i + 1\n        if j < #planetList and j>0 then\n            if lastPlanetSelected == planetList[j] then\n                screenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstarty\">]] ..\n                                   string.format(\"%s\", planetList[j]) .. [[</text>]]\n            else\n                screenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%s\", planetList[j]) .. [[</text>]]\n            end\n            displayPlanetList[i]=planetList[j]\n        else\n            displayPlanetList[i]=\"\"\n        end\n    end\n   \n    if planetCount > 12 then\n                screenOutput = screenOutput ..\n                                   [[<text x=\"70\" y=\"1000\" class=\"fmstartp\">Page ]] ..\n                                   CurrentPlanetPage .. \" of \" ..\n                                   math.ceil(planetCount / 12) ..\n                                   [[</text>]]\n\n        if CurrentPlanetPage < math.ceil(planetCount / 12) then\n                    screenOutput = screenOutput .. [[<svg x=\"70\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"PlanetPageDown\", {\n                        id = \"PlanetPageDown\",\n                        x1 = 70,\n                        x2 = 270,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"PlanetPageDown\")\n        end\n\n        if planetCount > 1 and CurrentPlanetPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"280\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..PlanetBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"PlanetPageUp\", {\n                        id = \"PlanetPageUp\",\n                        x1 = 280,\n                        x2 = 480,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"PlanetPageUp\")\n        end\n    end\n    -- Start of Location List\n    screenOutput = screenOutput ..\n                       [[<rect x=\"1070\" y=\"150\" rx=\"10\" ry=\"10\" width=\"820\" height=\"]] ..\n                       ((pageLines + 1) * 55) ..\n                       [[\" style=\"fill:]]..\n                       LocationBackgroundColor..\n                       [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"1080\" y=\"160\" rx=\"5\" ry=\"5\" width=\"800\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"1090\" y=\"191\" class=\"fcapstart\">]].. lastPlanetSelected ..[[ Locations</text>]]\n           \n\n    local i = 0\n    for j = 1 + (CurrentLocationPage - 1) * pageLines, pageLines +\n                (CurrentLocationPage - 1) * pageLines, 1 do\n        --system.print(\"locList: \"..locList[j])\n        i = i + 1\n        if j <= #locList and j>0 then\n            screenOutput = screenOutput .. [[<text x=\"1090\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%s\", locList[j]) .. [[</text>]]\n            displayLocationList[i]=locList[j]\n        else\n            displayLocationList[i]=\"\"\n        end\n    end\n   \n    if #locList > 12 then\n        screenOutput = screenOutput ..\n                                   [[<text x=\"1070\" y=\"1000\" class=\"fmstartl\">Page ]] ..\n                                   CurrentLocationPage .. \" of \" ..\n                                   math.ceil(#locList / 12) ..\n                                   [[</text>]]\n\n        if CurrentLocationPage < math.ceil(#locList / 12) then\n            screenOutput = screenOutput .. [[<svg x=\"1070\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..LocationBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"LocationPageDown\", {\n                        id = \"LocationPageDown\",\n                        x1 = 1070,\n                        x2 = 1270,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"LocationPageDown\")\n        end\n\n        if #locList > 1 and CurrentLocationPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"1280\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..LocationBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"LocationPageUp\", {\n                        id = \"LocationPageUp\",\n                        x1 = 1280,\n                        x2 = 1480,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"LocationPageUp\")\n        end\n    end\n        \n    screenOutput = screenOutput ..\n                               [[<rect x=\"300\" y=\"900\" rx=\"10\" ry=\"10\" width=\"500\" height=\"60\" style=\"fill:#ff6666;\" />]] ..\n                               [[<text x=\"540\" y=\"940\" class=\"fmmiddle\">Load Saved Locations</text>]]\n       \n    screenOutput = screenOutput ..\n                               [[<rect x=\"1200\" y=\"900\" rx=\"10\" ry=\"10\" width=\"500\" height=\"60\" style=\"fill:#ff6666;\" />]] ..\n                               [[<text x=\"1440\" y=\"940\" class=\"fmmiddle\">Clear Saved Locations</text>]]\n\n    screenOutput = screenOutput .. [[</svg>]]\n\n    DrawSVG(screenOutput)\n\n    forceRedraw = false\nend\n\n-----------------------------------------------\n-- Execute\n-----------------------------------------------\n\nunit.hide()\nInitiateClickAreas()\nDrawPlanetList()\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"8"},{"code":"function loadLocationTable ()\n\nlocationTable = {{}}\nlocationTable[1]                = {\"Alioth Market 1\", \"::pos{0,2,30.3314,101.3106,122.9764}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 2\", \"::pos{0,2,24.4469,88.0409,238.3019}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 3\", \"::pos{0,2,34.9734,87.3012,176.2188}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 4\", \"::pos{0,2,28.3352,99.5187,165.9078}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 5\", \"::pos{0,2,33.3939,87.3299,277.1366}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 6\", \"::pos{0,2,36.0044,101.3503,220.0897}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 7\", \"::pos{0,2,22.5024,98.1449,232.5154}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 8\", \"::pos{0,2,21.2154,93.9616,251.0768}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 9\", \"::pos{0,2,28.7133,85.6389,260.7636}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 10\", \"::pos{0,2,35.9865,91.8393,190.1616}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 11\", \"::pos{0,2,-1.0735,178.5062,69.9428}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 12\", \"::pos{0,2,22.7112,-92.3078,166.8481}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 13\", \"::pos{0,2,-23.3768,-10.5455,178.8458}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 14\", \"::pos{0,2,-73.4716,101.3697,89.5661}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 15\", \"::pos{0,2,61.7831,27.8517,54.9186}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 16\", \"::pos{0,2,23.4406,114.4179,211.1991}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 17\", \"::pos{0,2,37.8637,64.1825,151.5507}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 18\", \"::pos{0,2,49.9360,-170.7565,62.1982}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 19\", \"::pos{0,2,-32.7357,76.3764,209.0805}\"}\nlocationTable[#locationTable+1] = {\"Alioth Market 20\", \"::pos{0,2,-35.1535,-95.1230,301.0724}\"}\n\nlocationTable[#locationTable+1] = {\"Madis Market 1\", \"::pos{0,1,2.6476,176.8761,813.0974}\"}\nlocationTable[#locationTable+1] = {\"Madis Market 2\", \"::pos{0,1,10.3552,8.5146,816.2210}\"}\nlocationTable[#locationTable+1] = {\"Madis Market 3\", \"::pos{0,1,-0.2107,82.0779,809.5571}\"}\nlocationTable[#locationTable+1] = {\"Madis Market 4\", \"::pos{0,1,-80.6046,44.9385,822.6188}\"}\nlocationTable[#locationTable+1] = {\"Madis Market 5\", \"::pos{0,1,81.0827,5.3022,823.1976}\"}\nlocationTable[#locationTable+1] = {\"Madis Market 6\", \"::pos{0,1,13.9814,-91.6163,811.0679}\"}\n\nlocationTable[#locationTable+1] = {\"Thades M1: Market\", \"::pos{0,30,-2.9797,-117.7645,203.7519}\"}\nlocationTable[#locationTable+1] = {\"Feli: Market\", \"::pos{0,5,0.9348,178.6658,18417.2812}\"}\n\nlocationTable[#locationTable+1] = {\"Symeon Market 1\", \"::pos{0,110,3.1400,-174.0223,267.1084}\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 2\", \"::pos{0,110,-0.9862,88.3038,197.0626}\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 3\", \"::pos{0,110,18.1117,11.1108,180.8022}\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 4\", \"::pos{0,110,-26.9701,103.3741,186.2557}\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 5\", \"::pos{0,110,83.1653,108.7807,142.5796}\"}\nlocationTable[#locationTable+1] = {\"Symeon Market 6\", \"::pos{0,110,-79.3167,95.3975,138.5268}\"}\n\nlocationTable[#locationTable+1] = {\"TMV Troghelm\", \"::pos{0,0,2416521.6598,1415126.8118,59323.7340}\"}\nlocationTable[#locationTable+1] = {\"TMV Alioth Factory\", \"::pos{0,2,22.8158,111.1414,103.5685}\"}\nlocationTable[#locationTable+1] = {\"TMV Feli Outpost\", \"::pos{0,5,23.6988,-77.8811,18480.5176}\"}\nlocationTable[#locationTable+1] = {\"TMV Thandes M1 Outpost\", \"::pos{0,30,-22.3548,-168.7352,288.1909}\"}\nlocationTable[#locationTable+1] = {\"TMV Madis Outpost\", \"::pos{0,1,-43.0914,75.0728,749.6641}\"}\nlocationTable[#locationTable+1] = {\"TMV Symoen Outpost\", \"::pos{0,110,-5.3046,32.6900,108.4144}\"}\n\n\n\n\n\n\n\n    \n\nend\n\n","filter":{"args":[],"signature":"start()","slotKey":"-2"},"key":"9"}],"methods":[],"events":[]}
